{"version":3,"sources":["key.js","App.js","reportWebVitals.js","index.js"],"names":["process","SPOONACULAR_API_KEY","App","query","setQuery","useState","recipes","setRecipes","isLoading","setIsLoading","error","setError","currentPage","setCurrentPage","recipesPerPage","selectedCuisine","setSelectedCuisine","totalResults","setTotalResults","totalPages","setTotalPages","url","onSubmit","e","preventDefault","async","result","Axios","get","data","results","Math","ceil","console","getRecipes","React","createElement","className","onLoad","type","placeholder","value","onChange","target","label","map","cuisine","key","recipe","id","title","src","image","alt","style","width","onClick","prev","max","disabled","length","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.934ec933.chunk.js","sourcesContent":["const API_KEY = process.env.SPOONACULAR_API_KEY;","import \"./key\";\nimport './App.css';\nimport React, { useState } from 'react';\nimport Axios from \"axios\";\n\nfunction App() {\n  const [query, setQuery] = useState(\"\"); \n  const [recipes, setRecipes] = useState([]); \n  const [isLoading, setIsLoading] = useState(false); \n  const [error, setError] = useState(null); \n  const [currentPage, setCurrentPage] = useState(1);\n  const [recipesPerPage] = useState(5);\n  const [selectedCuisine, setSelectedCuisine] = useState('');\n  const [totalResults, setTotalResults] = useState(0);\nconst [totalPages, setTotalPages] = useState(0);\nconst cuisines = [\n  { label: \"African\", value: \"African\" },\n  { label: \"Asian\", value: \"Asian\" },\n  { label: \"American\", value: \"American\" },\n  { label: \"British\", value: \"British\" },\n  { label: \"Cajun\", value: \"Cajun\" },\n  { label: \"Caribbean\", value: \"Caribbean\" },\n  { label: \"Chinese\", value: \"Chinese\" },\n  { label: \"Eastern European\", value: \"Eastern European\" },\n  { label: \"European\", value: \"European\" },\n  { label: \"French\", value: \"French\" },\n  { label: \"German\", value: \"German\" },\n  { label: \"Greek\", value: \"Greek\" },\n  { label: \"Indian\", value: \"Indian\" },\n  { label: \"Irish\", value: \"Irish\" },\n  { label: \"Italian\", value: \"Italian\" },\n  { label: \"Japanese\", value: \"Japanese\" },\n  { label: \"Jewish\", value: \"Jewish\" },\n  { label: \"Korean\", value: \"Korean\" },\n  { label: \"Latin American\", value: \"Latin American\" },\n  { label: \"Mediterranean\", value: \"Mediterranean\" },\n  { label: \"Mexican\", value: \"Mexican\" },\n  { label: \"Middle Eastern\", value: \"Middle Eastern\" },\n  { label: \"Nordic\", value: \"Nordic\" },\n  { label: \"Southern\", value: \"Southern\" },\n  { label: \"Spanish\", value: \"Spanish\" },\n  { label: \"Thai\", value: \"Thai\" },\n  { label: \"Vietnamese\", value: \"Vietnamese\" }\n];\n\n\n  const API_KEY = \"3beb197c9690416e8301673e7a94b78d\";\n  var url = `https://api.spoonacular.com/recipes/complexSearch?apiKey=${API_KEY}&query=${query}&number=${recipesPerPage}&offset=${(currentPage - 1) * recipesPerPage}&cuisine=${selectedCuisine}`;\n\n  async function getRecipes() {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const result = await Axios.get(url);\n      setRecipes(result.data.results);\n      setTotalResults(result.data.totalResults);\n      setTotalPages(Math.ceil(result.data.totalResults / recipesPerPage));\n    } catch (error) {\n      setError('Failed to fetch recipes');\n      console.error('Error fetching recipes', error);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n  \n\n  const onSubmit = (e) => {\n    e.preventDefault(); \n    setCurrentPage(1); \n    getRecipes();\n  }\n\n  return (\n    <div className=\"app\">\n      <h1>Recipe Website</h1>\n      <form className=\"app__searchForm\" onSubmit={onSubmit} onLoad={onSubmit}>\n        <input \n          type=\"text\" \n          className=\"app__input\"\n          placeholder=\"Enter ingredient\" \n          value={query} \n          onChange={(e) => setQuery(e.target.value)}\n        />\n<select\n  value={selectedCuisine}\n  onChange={(e) => setSelectedCuisine(e.target.value)}\n  className=\"app__cuisineSelect\"\n>\n  <option value=\"\">All Cuisines</option>\n  {cuisines.map((cuisine) => (\n    <option key={cuisine.value} value={cuisine.value}>\n      {cuisine.label}\n    </option>\n  ))}\n</select>\n        <input className=\"app__submit\" type=\"submit\" value=\"Search\"/>\n      </form>    \n      {isLoading && <p>Loading...</p>}\n      {error && <p>{error}</p>}\n      <div className=\"app__recipes\">\n        {recipes.map(recipe => (\n          <div key={recipe.id}>\n            <h3>{recipe.title}</h3>\n            <img src={recipe.image} alt={recipe.title} style={{ width: '100px' }} />\n          </div>\n        ))}\n      </div>\n      <div className=\"pagination-info\">\n    <p>Page {currentPage} of {totalPages}</p>\n    <p>Total Results: {totalResults}</p>\n  </div>\n      <div className=\"pagination\">\n        <button onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))} disabled={currentPage === 1}>Prev</button>\n        <button onClick={() => setCurrentPage(prev => prev + 1)} disabled={recipes.length < recipesPerPage}>Next</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}