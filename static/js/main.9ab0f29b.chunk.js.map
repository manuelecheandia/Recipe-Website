{"version":3,"sources":["key.js","App.js","reportWebVitals.js","index.js"],"names":["process","SPOONACULAR_API_KEY","App","query","setQuery","recipes","setRecipes","useState","isLoading","setIsLoading","error","setError","url","React","createElement","className","onSubmit","e","preventDefault","async","result","Axios","get","data","results","console","getRecipes","type","placeholder","value","onChange","target","map","recipe","key","id","title","src","image","alt","style","width","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"iKAAgBA,kIAAYC,qB,4HC0DbC,MArDf,WACE,MAAOC,EAAOC,EAAUC,EAASC,GAAcC,mBAAS,KACjDC,EAAWC,GAAgBF,oBAAS,IACtCG,EAAOC,GAAYJ,mBAAS,MAGjC,IAAIK,EAAM,mGAA6ET,EAqBvF,OACCU,IAAAC,cAAA,OAAKC,UAAU,OACdF,IAAAC,cAAA,UAAI,kBACJD,IAAAC,cAAA,QAAMC,UAAU,kBAAkBC,SARlBC,IAChBA,EAAEC,iBAfJC,iBACEV,GAAa,GACbE,EAAS,MACT,IACE,MAAMS,QAAeC,IAAMC,IAAIV,GAC/BN,EAAWc,EAAOG,KAAKC,SACvB,MAAOd,GACPC,EAAS,2BACTc,QAAQf,MAAM,yBAA0BA,GACzC,QACCD,GAAa,IAMfiB,KAOEb,IAAAC,cAAA,SACEa,KAAK,OACLZ,UAAU,aACVa,YAAY,mBACZC,MAAO1B,EACP2B,SAAWb,GAAMb,EAASa,EAAEc,OAAOF,SACrChB,IAAAC,cAAA,SAAOC,UAAU,cAAcY,KAAK,SAASE,MAAM,YAErDhB,IAAAC,cAAA,OAAKC,UAAU,gBACdP,GAAaK,IAAAC,cAAA,SAAG,cAChBJ,GAASG,IAAAC,cAAA,SAAIJ,GACXL,EAAQ2B,IAAIC,GACXpB,IAAAC,cAAA,OAAKoB,IAAKD,EAAOE,IACftB,IAAAC,cAAA,UAAKmB,EAAOG,OACZvB,IAAAC,cAAA,OAAKuB,IAAKJ,EAAOK,MAAOC,IAAKN,EAAOG,MAAOI,MAAO,CAAEC,MAAO,gBCtCtDC,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,KAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,MCDDS,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH3C,IAAAC,cAACD,IAAM4C,WAAU,KACf5C,IAAAC,cAACZ,EAAG,QAORwC,M","file":"static/js/main.9ab0f29b.chunk.js","sourcesContent":["const API_KEY = process.env.SPOONACULAR_API_KEY;","import \"./key\";\nimport './App.css';\nimport React, { useState } from 'react';\nimport Axios from \"axios\";\n\nfunction App() {\n  const [query, setQuery, recipes, setRecipes] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\nconst [error, setError] = useState(null);\n\n  const API_KEY = \"3beb197c9690416e8301673e7a94b78d\";\n  var url = `https://api.spoonacular.com/recipes/complexSearch?apiKey=${API_KEY}&query=${query}`;\n\n  async function getRecipes() {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const result = await Axios.get(url);\n      setRecipes(result.data.results);\n    } catch (error) {\n      setError('Failed to fetch recipes');\n      console.error('Error fetching recipes', error);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  const onSubmit = (e) =>{\n    e.preventDefault(); //This will prevent a page reload\n    getRecipes();\n  }\n\n  return (\n   <div className=\"app\">\n    <h1>Recipe Website</h1>\n    <form className=\"app__searchForm\" onSubmit={onSubmit}>\n      <input \n        type=\"text\" \n        className=\"app__input\"\n        placeholder=\"Enter ingredient\" \n        value={query} \n        onChange={(e) => setQuery(e.target.value)}/>\n      <input className=\"app__submit\" type=\"submit\" value=\"Search\"/>\n    </form>\n    <div className=\"app__recipes\">\n    {isLoading && <p>Loading...</p>}\n    {error && <p>{error}</p>}\n      {recipes.map(recipe => (\n        <div key={recipe.id}>\n          <h3>{recipe.title}</h3>\n          <img src={recipe.image} alt={recipe.title} style={{ width: '100px' }} />\n        </div>\n      ))}\n    </div>\n   </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}